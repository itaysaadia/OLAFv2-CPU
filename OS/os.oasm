; This is the Operating System for OLAFv2, written by Itay Saadia (2019).


.rodata
; this section will create an image of the RAM that contains a block of 
; data in the beginning of the memory.

; strings 
char TODO_DELETE_ME[] = "ZERO POINTER"
char OS_NAME[] = "OLAFv2"
char GET_USERNAME[] = "enter username: "
char NO_COMMAND[] = "command not found"
char GET_FILENAME[] = "enter filename: "

; commands
char touch[] = "touch"
char rm[] = "rm"
char ls[] = "ls"
char cat[] = "cat"
char cls[] = "cls"
char edit[] = "edit"
char reset[] = "reset"


.data

char username[128]
char command[128]
char filename_input[256]


; files
int last_file_descriptor[1]
int last_file_name[1]
int last_file_data[1]
char file_maps[512]
char files_names[3840]
char files_data[40960]


.text

boot:
    CALL @__kernel__boot
    __boot__boot_msg:
        MOV $RDI, #OS_NAME
        CALL @print
        OUT 10


get_username:
    MOV $RDI, #GET_USERNAME
    CALL @print
    MOV $RDI, #username
    CALL @blocking_read


prompt:
    MOV $RDI, #username
    CALL @print
    OUT '@'
    MOV $RDI, #OS_NAME
    CALL @print
    OUT '#'
    OUT 0x20


read_command:
    MOV $RDI, #command
    CALL @blocking_read


parse_command:
    __parse_command__test_cls:
        MOV $RDI, #command
        MOV $RSI, #cls
        CALL @strcmp
        TEST $RA, 1
        JEQ @__parse_command__call_cls
    __parse_command__test_ls:
        MOV $RDI, #command
        MOV $RSI, #ls
        CALL @strcmp
        TEST $RA, 1
        JEQ @__parse_command__call_ls
        MOV $RDI, #command
        MOV $RSI, #reset
        CALL @strcmp
        TEST $RA, 1
        JEQ @__parse_command__call_reset
    __parse_command__test_touch:
        MOV $RDI, #command
        MOV $RSI, #touch
        CALL @strcmp
        TEST $RA, 1
        JEQ @__parse_command__call_touch
    __parse_command__test_rm:
        MOV $RDI, #command
        MOV $RSI, #rm
        CALL @strcmp
        TEST $RA, 1
        JEQ @__parse_command__call_rm
    MOV $RB, #command
    LOAD $RB
    TEST $RB, 0
    JEQ @__parse_command__goto_prompt
    __parse_command__command_not_found:
        MOV $RDI, #command
        CALL @print
        OUT ':'
        OUT 0x20
        MOV $RDI, #NO_COMMAND
        CALL @print
        OUT 10
    __parse_command__goto_prompt:
        JMP @prompt
    __parse_command__call_cls:
        CALL @cls
        JMP @prompt
    __parse_command__call_touch:
        CALL @touch
        JMP @prompt
    __parse_command__call_reset:
        CALL @reset
    __parse_command__call_ls:
        CALL @ls
        JMP @prompt
    __parse_command__call_rm:
        CALL @rm
        JMP @prompt


ls:
    CALL @__kernel__get_next_fd
    PUSH $RA
    POP $RC
    __ls__print_next_file_name:
        ; set $RA to the max fd
        CALL @__kernel__get_last_fd
        CHMR
        TEST $RA, $RC
        CHMC
        JEQ @__ls__exit
        PUSH $RC
        POP $RDI
        CALL @__kernel__get_filename_from_fd
        PUSH $RA
        POP $RDI
        CALL @print
        OUT 10
        ADD $RC, 1
        JMP @__ls__print_next_file_name
    __ls__exit:
        RET


reset:
    OUT 'b'
    OUT 'y'
    OUT 'b'
    CALL @blocking_read
    RST


cls:
    OUT 0x0c
    RET


touch: 
    MOV $RDI, #GET_FILENAME
    CALL @print
    MOV $RDI, #filename_input
    CALL @blocking_read
    MOV $RDI, #filename_input
    CALL @__kernel__create_file
    RET


rm: 
    MOV $RDI, #GET_FILENAME
    CALL @print
    MOV $RDI, #filename_input
    CALL @blocking_read
    MOV $RDI, #filename_input
    CALL @__kernel__delete_file
    RET


; gets 1 argument, the initial location for the data
; returns the number of chars gets
blocking_read:
    PUSH $RDI
    POP $RB
    MOV $RA, 0
    __blocking_read__get_char:
        GET $RD
        TEST $RD, 0
        JEQ @__blocking_read__get_char
        ; compare with backspace
        TEST $RD, 0x8
        JEQ @__blocking_read__backspace
        OUT
        TEST $RD, 10
        JEQ @__blocking_read__return
        __blocking_read__not_zero:
            STOR $RD
            ADD $RB, 1
            ADD $RA, 1
            JMP @__blocking_read__get_char
        __blocking_read__backspace:
            TEST $RA, 0
            JEQ @__blocking_read__get_char
            SUB $RB, 1
            SUB $RA, 1
            OUT
            JMP @__blocking_read__get_char
    __blocking_read__return:
        MOV $RD, 0
        STOR $RD
        RET


; gets 1 argument, the initial position of the data
print:
    PUSH $RDI
    POP $RB
    __print__get_char:
        LOAD $RD
        TEST $RD, 0
        JEQ @__print__ret
        __print__not_zero:
            OUT
            ADD $RB, 1
        JMP @__print__get_char
    __print__ret:
    RET


; get 2 arguments, 2 addresses of null - terminated strings to compare
strcmp:
    PUSH $RC
    __strcmp__load_first_value:
        PUSH $RDI
        POP $RB
        LOAD $RA
        ADD $RDI, 1
    __strcmp__load_second_value:
        PUSH $RSI
        POP $RB
        LOAD $RC
        ADD $RSI, 1
    __strcmp__check_if_equals:
        CHMR
        TEST $RA, $RC
        CHMC
        JNE @__strcmp__not_equals
    __strcmp__check_if_end:
        ; if it is true it's means that $RC is also \00 because if we got
        ; here they both equal
        TEST $RA, 0
        JEQ @__strcmp__equals
        JMP @__strcmp__load_first_value
    __strcmp__equals:
        MOV $RA, 1
        JMP @__strcmp__exit
    __strcmp__not_equals:
        MOV $RA, 0
        JMP @__strcmp__exit
    __strcmp__exit:
        POP $RC
        RET


strcpy:
    PUSH $RDI
    PUSH $RSI
    __strcpy__copy:
        ; load the data in RDI to RSI
        PUSH $RDI
        POP $RB
        LOAD $RA
        PUSH $RSI
        POP $RB
        STOR $RA
        ; we are testing this after the write because we want to add the null
        TEST $RA, 0
        JEQ @__strcpy__exit
        ADD $RDI, 1
        ADD $RSI, 1
        JMP @__strcpy__copy
    __strcpy__exit:
        POP $RSI
        POP $RDI
        RET


strlen:
    PUSH $RC
    PUSH $RDI
    MOV $RA, 1
    __strlen__count:
        PUSH $RDI
        POP $RB
        LOAD $RC
        TEST $RC, 0
        JEQ @__strlen__exit
        ADD $RA, 1
        ADD $RDI, 1
        JMP @__strlen__count
    __strlen__exit:
        POP $RDI
        POP $RC
        RET


; kernel code. this code is related to the abstraction of the Operating System
; and it is not a command (there are commands that use this code, but the user
; shouldn't use these function as commands)
kernel:
    ; welcome to the underworld.
    __kernel__boot:
        __kernel__boot__load_filename_address:
            MOV $RB, #last_file_name
            MOV $RA, #files_names
            STOR $RA
        __kernel__boot__load__file_data_address:
            MOV $RB, #last_file_data
            MOV $RA, #files_data
            STOR $RA
        RET


    __kernel__create_file:
        __kernel__create_file__copy_filename:
            ; RDI is the name of the file 
            MOV $RB, #last_file_name
            LOAD $RSI
            ; RSI now contains the new address of the filename
            CALL @strcpy
        __kernel__create_file__update_file_with_his_name:
            MOV $RB, #last_file_descriptor
            LOAD $RDI
            CALL @__kernel__get_kernel_file_from_fd
            PUSH $RA
            POP $RB
            ; write to the file his name
            STOR $RSI 
        __kernel__create_file__increase_last_filename:
            MOV $RB, #last_file_name
            LOAD $RDI
            CALL @strlen
            ; the length is in register $RA
            CHMR
            ADD $RA, $RDI
            CHMC
            MOV $RB, #last_file_name
            STOR $RA
        CALL @__kernel__increase_last_fd
        RET


    ; this function gets one argument, a pointer to a filename
    ; to delete
    __kernel__delete_file:
        CALL @__kernel__find_file
        TEST $RA, 0xffff
        JEQ @__kernel__delete_file__exit
        PUSH $RA
        POP $RDI
        CALL @__kernel__get_kernel_file_from_fd
        __kernel__delete_file__exit:
            PUSH $RA
            POP $RB
            MOV $RA, 0
            STOR $RA
            ADD $RB, 1
            STOR $RA
            MOV $RA, 1
            RET


    ; this function gets 1 arguments (file name)
    ; and returns the corresponding file descriptor
    __kernel__find_file:
        ; setting $RSI to $RDI's value for the function @strcmp. we are doing 
        ; this right now because the value of $RDI is changing during execution
        PUSH $RDI
        POP $RSI
        MOV $RC, 0
        __kernel__find_file__check_next_file_name:
            CALL @__kernel__get_last_fd
            CHMR
            TEST $RA, $RC
            CHMC
            JEQ @__kernel__find_file__not_found
            PUSH $RC
            POP $RDI
            CALL @__kernel__get_filename_from_fd
            PUSH $RA
            POP $RDI
            CALL @strcmp
            TEST $RA, 1
            JEQ @__kernel__find_file__found
            ADD $RC, 1
            JMP @__kernel__find_file__check_next_file_name
        __kernel__find_file__found:
            PUSH $RC
            POP $RA
            JMP @__kernel__find_file__exit
        __kernel__find_file__not_found:
            MOV $RA, 0xffff
        __kernel__find_file__exit:
            RET

    __kernel__get_next_fd:
        ; calculate
        PUSH $RDI
        PUSH $RD
        PUSH $RC
        PUSH $RDI
        ADD $RDI, 1
        ; store the current fd + 1 in $RD to keep it for later
        PUSH $RDI
        POP $RD
        ; check if the next file descriptor points to NULL
        OUT 'A'
        CALL @__kernel__get_filename_from_fd
        TEST $RA, 0
        ; if the name of the fd is not NULL, the file if valid for sure
        JNE @__kernel__get_next_fd__end
        CALL @__kernel__get_data_from_fd
        OUT 'B'
        TEST $RA, 0
        JNE @__kernel__get_next_fd__end
        OUT 'C'
        ; looks like we got NULL pointer. we check if this is the last fd
        ; store last fd in $RC 
        CALL @__kernel__get_last_fd
        PUSH $RA
        POP $RC
        TEST $RA, $RC
        JNE @__kernel__get_next_fd
        ; this is both NULL pointer and the last file. 
        __kernel__get_next_fd__end:
            OUT 'D'
            POP $RC
            POP $RD
            POP $RDI
            RET
        

    __kernel__get_filename_from_fd:
            CALL @__kernel__get_kernel_file_from_fd
            PUSH $RB
            PUSH $RA
            POP $RB
            LOAD $RA
            POP $RB
            RET


    __kernel__get_data_from_fd:
            CALL @__kernel__get_kernel_file_from_fd
            ADD $RA, 1
            RET


    __kernel__get_last_fd:
            PUSH $RB
            MOV $RB, #last_file_descriptor
            LOAD $RA
            POP $RB
            RET


    __kernel__increase_last_fd:
            PUSH $RA
            PUSH $RDI
            PUSH $RA
            POP $RDI
            CALL @__kernel__get_last_fd
            POP $RDI
            ADD $RA, 1
            STOR $RA
            POP $RA
            RET


    __kernel__get_kernel_file_from_fd:
            PUSH $RDI
            ; multiply by 2 because it is the size of the file
            MUL $RDI, 2
            ; add to the address of file_maps because we
            ; want to reach the address
            ADD $RDI, #file_maps
            PUSH $RDI
            POP $RA
            POP $RDI
            RET
